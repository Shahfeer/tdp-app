image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DB_HOST: 192.168.29.58
  DB_PORT: 3306
  DB_DATABASE: tdp_call
  DB_USERNAME: admin
  DB_PASSWORD: Password@123

before_script:
  - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin

stages:
  - build
  - deploy
  - clean_up

build:
  stage: build
  tags:
    - docker
  script:
    # Debug Docker connectivity
    - docker info
    # Build and tag the image
    - docker build -t $DOCKER_USERNAME/my-laravel-app .
    - docker tag $DOCKER_USERNAME/my-laravel-app $DOCKER_USERNAME/my-laravel-app:latest
    # Push the new image to the Docker registry
    - docker push $DOCKER_USERNAME/my-laravel-app:latest

deploy:
  stage: deploy
  tags:
    - docker
  script:
    # Start MySQL container
    - docker network create my-network || true
    # Stop and remove the old MySQL container, if it exists
    - docker ps -q --filter "name=192.168.29.58" | xargs -r docker stop | xargs -r docker rm
    - docker ps -q --filter "name=my-laravel-app" | xargs -r docker stop | xargs -r docker rm

    - docker volume ls -q --filter "name=laravel_data" | xargs -r docker volume rm
    - docker volume ls -q --filter "name=mysql_data" | xargs -r docker volume rm
    
    - docker run -d --name 192.168.29.58 --network my-network -e MYSQL_ROOT_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_DATABASE -p 3307:3306 -v mysql_data:/var/lib/mysql mysql:8
    # Stop and remove the old container, if it exists
    # Remove the old image
    - docker images -q "$DOCKER_USERNAME/my-laravel-app" | xargs -r docker rmi
    # Run the new container with the updated image
    - docker run -d --name my-laravel-app --network my-network -p 8088:80 -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_DATABASE=$DB_DATABASE -e DB_USERNAME=$DB_USERNAME -e DB_PASSWORD=$DB_PASSWORD -v laravel_data:/var/www/html $DOCKER_USERNAME/my-laravel-app:latest

clean_up_job:
  stage: clean_up
  tags:
    - docker
  script:
    # Cleanup dangling images, containers, and volumes
    - docker system prune -af
  when: on_failure
